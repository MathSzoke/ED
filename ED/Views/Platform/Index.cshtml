@model dynamic

<link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.8.1/font/bootstrap-icons.min.css" rel="stylesheet">
<style>
    .organograma-grid-container {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        padding: 20px;
        border-radius: 8px;
        margin-top: 20px;
        background-color: #ffffff;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    #organogramaTable {
        width: 100%;
        border-collapse: collapse;
        font-size: 0.9em;
        color: #333;
    }

        #organogramaTable th,
        #organogramaTable td {
            padding: 10px 12px;
            text-align: left;
            border-bottom: 1px solid #e0e0e0;
        }

        #organogramaTable th {
            background-color: #f8f9fa;
            font-weight: 600;
        }

        #organogramaTable tbody tr:hover {
            background-color: #f1f1f1;
        }

    .expander-icon {
        cursor: pointer;
        width: 20px;
        text-align: center;
        display: inline-block;
        transition: transform 0.2s ease-in-out;
        color: #555;
    }

        .expander-icon.expanded {
            transform: rotate(90deg);
        }

    .status-active .icon, .status-vacant .icon {
        display: inline-block;
        width: 10px;
        height: 10px;
        border-radius: 50%;
        margin-right: 8px;
        vertical-align: middle;
    }

    .status-active .icon {
        background-color: #28a745;
    }

    .status-vacant .icon {
        background-color: #dc3545;
    }

    .status-active span, .status-vacant span {
        font-weight: bold;
    }

    .status-active span {
        color: #218838;
    }

    .status-vacant span {
        color: #c82333;
    }

    .actions-cell button {
        padding: 4px 8px;
        margin-left: 5px;
        cursor: pointer;
        border-radius: 4px;
        font-size: 0.9em;
        border: 1px solid #ccc;
        background-color: #f8f9fa;
        color: #333;
    }

        .actions-cell button:hover {
            background-color: #e2e6ea;
            border-color: #dae0e5;
        }

    .actions-cell .bi {
        font-size: 1em;
        vertical-align: middle;
    }
</style>

<div class="organograma-grid-container">
    <h3>Organograma da Plataforma</h3>
    <table id="organogramaTable">
        <thead>
            <tr>
                <th style="width: 40px;"></th>
                <th>Função/Cargo</th>
                <th>Ocupante (Cód. Funcional)</th>
                <th>Status</th>
                <th>Desde</th>
                <th>Hub</th>
                <th style="width: 120px;">Ações</th>
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function() {
        var organogramaData = @Html.Raw(Json.Encode(Model));
        var tableBody = $('#organogramaTable tbody');
        tableBody.empty();

        var initialLevel = 0;
        var indentationStep = 40;

        if (organogramaData && organogramaData.PositionCode) {
            tableBody.append(generateRowHtml(organogramaData, initialLevel, null, indentationStep));
        } else {
            var platformIdFromUrl = window.location.pathname.split('/').pop();
            tableBody.html('<tr><td colspan="7" style="text-align:center;">Não foi possível carregar os dados do organograma para a plataforma ID ' + platformIdFromUrl + '.</td></tr>');
        }

        $('#organogramaTable tbody').on('click', '.expander-icon', function() {
            var $icon = $(this);
            var $parentRow = $icon.closest('tr');
            var positionCode = $parentRow.data('position-code');
            var currentLevel = parseInt($parentRow.data('level'), 10);

            var nodeData = findNodeByPositionCode(organogramaData, positionCode);

            if (!nodeData) {
                return;
            }

            if ($parentRow.hasClass('expanded')) {
                $parentRow.removeClass('expanded');
                $icon.removeClass('expanded');
                $('tr.child-of-' + positionCode).each(function() {
                    var childPositionCode = $(this).data('position-code');
                    if ($(this).hasClass('expanded')) {
                         $('tr.child-of-' + childPositionCode).remove();
                    }
                    $(this).remove();
                });
            } else {
                if (nodeData.Subordinates && nodeData.Subordinates.length > 0) {
                    var subItemsHtml = '';
                    nodeData.Subordinates.forEach(function(subNode) {
                        subItemsHtml += generateRowHtml(subNode, currentLevel + 1, positionCode, indentationStep);
                    });
                    $parentRow.after(subItemsHtml);
                    $parentRow.addClass('expanded');
                    $icon.addClass('expanded');
                }
            }
        });
    });

    function formatDateString(dateString) {
        if (!dateString || dateString === '-') {
            return '-';
        }
        try {

            if (dateString.includes('T')) {
                dateString = dateString.split('T')[0];
                var parts = dateString.split('-');
                if (parts.length === 3) {
                    return `${parts[2]}/${parts[1]}/${parts[0]}`;
                }
                return dateString;
            }

            if (dateString.includes(' ')) {
                return dateString.split(' ')[0];
            }

            return dateString;
        } catch (e) {
            return dateString;
        }
    }

    function generateRowHtml(node, level, parentPositionCode, indentationStep) {
        var rowClass = level > 0 ? 'child-row child-of-' + parentPositionCode : 'parent-row';
        var currentPadding = level * indentationStep;

        var html = `<tr data-position-code="${node.PositionCode}" data-level="${level}" class="${rowClass}">`;

        var expanderCellContent = '';
        if (node.Subordinates && node.Subordinates.length > 0) {
            expanderCellContent = `<span class="expander-icon"><i class="bi bi-chevron-right"></i></span>`;
        }
        html += `<td style="padding-left: ${currentPadding}px;">${expanderCellContent}</td>`;

        html += `<td class="role-cell">${node.Role || '-'}</td>`;

        var occupantName = node.Occupant ? node.Occupant.Name : 'Vaga';
        var occupantCode = node.Occupant ? node.Occupant.FunctionalCode : '-';
        html += `<td>${occupantName} (${occupantCode})</td>`;

        var statusClass = node.Occupant ? 'status-active' : 'status-vacant';
        var statusText = node.Occupant ? 'ATIVO' : 'VAGA';
        html += `<td><span class="${statusClass}"><span class="icon"></span> <span>${statusText}</span></span></td>`;

        var formattedSinceDate = formatDateString(node.Occupant && node.Occupant.Since ? node.Occupant.Since : '-');
        html += `<td>${formattedSinceDate}</td>`;

        html += `<td>${node.HubName || '-'}</td>`;
        html += `<td class="actions-cell">
                    <button title="Detalhes" onclick="viewDetails(${node.PositionCode})"><i class="bi bi-search"></i></button>
                    <button title="Editar" onclick="editPosition(${node.PositionCode})"><i class="bi bi-pencil-square"></i></button>
                 </td>`;
        html += `</tr>`;
        return html;
    }

    function findNodeByPositionCode(currentNode, targetPositionCode) {
        if (!currentNode) return null;
        if (currentNode.PositionCode === targetPositionCode) {
            return currentNode;
        }
        if (currentNode.Subordinates && currentNode.Subordinates.length > 0) {
            for (var i = 0; i < currentNode.Subordinates.length; i++) {
                var found = findNodeByPositionCode(currentNode.Subordinates[i], targetPositionCode);
                if (found) return found;
            }
        }
        return null;
    }

    function viewDetails(positionCode) {
        alert('Ver detalhes da Posição: ' + positionCode);
    }
    function editPosition(positionCode) {
        alert('Editar Posição: ' + positionCode);
    }
</script>